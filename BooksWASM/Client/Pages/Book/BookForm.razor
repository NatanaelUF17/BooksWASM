@page "/Books/Add"
@page "/Books/{Id:int}/Edit"
@using BooksWASM.Shared.Models
@inject IBooksServices bookService
@inject IToastService Toast

<div class="container">
	<div style="display: contents;">
		<div class="card mb-5">
			<div class="card-header text-center">
				<div class="form-group">
					<h3>Book Form</h3>
				</div>
			</div>
			<div class="card-body">
				<EditForm Model="book">
					<div class="form-row align-items-md-center align-items-center">
						<div class="col">
							<div class="form-group">
								<InputNumber @bind-Value="book.Id" readonly hidden/>
							</div>
							<div class="form-group">
								<label for="Title">Title:</label>
								<InputText @bind-Value="book.Title" class="form-control" required/>
							</div>
							<div class="form-group">
								<label for="Description">Description:</label>
								<InputTextArea @bind-Value="book.Description" class="form-control" required/>
							</div>
							<div class="form-group">
								<label for="PageCount">Page count:</label>
								<InputNumber @bind-Value="book.PageCount" class="form-control" required/>		
							</div>
							<div class="form-group">
								<label for="Excerpt">Excerpt:</label>
								<InputTextArea @bind-Value="book.Excerpt" class="form-control"required />		
							</div>
							<div class="form-group">
								<label for="PublishDate">Publish Date:</label>
								<InputDate @bind-Value="book.PublishDate" class="form-control" required/>		
							</div>
						</div>
					</div>
				</EditForm>
			</div>
			<div class="card-footer">
				<div class="form-group text-center">
					@if(Id > 0)
					{
						<button @onclick="SaveBook" type="submit" class="btn btn-outline-primary">
							<span class="oi oi-document"></span> Edit
						</button>	
					}
					else
					{
						<button @onclick="SaveBook" type="submit" class="btn btn-outline-success">
							<span class="oi oi-document"></span> Save
						</button>
					}
				</div>
			</div>
		</div>
	</div>
</div>

@code {

	[Parameter]
	public int Id { get; set; }

	Books book = new Books();

	protected override async Task OnInitializedAsync()
	{
		if(Id > 0)
		{
			book = await bookService.GetBook(Id);
		}
	}

	private async Task SaveBook()
	{
		if(book.Id > 0)
		{
			await UpdateBook();
		}
		else
		{
			await InsertBook();
		}
	}

	private async Task InsertBook()
	{
		try
		{
			await bookService.PostBook(book);
			Toast.ShowSuccess("Book saved!");
			book = new Books();
		}
		catch (Exception e)
		{
			Toast.ShowError($"Error: {e.Message}");
		}
	}

	private async Task UpdateBook()
	{
		try
		{
			await bookService.UpdateBook(book.Id, book);
			Toast.ShowSuccess("Book updated!");
			book = new Books();
		}
		catch (Exception e)
		{
			Toast.ShowError($"Error: {e.Message}");
		}
	}
}